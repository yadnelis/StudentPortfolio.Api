// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentPortfolio.API.Infrastructure;

#nullable disable

namespace StudentPortfolio.API.Migrations
{
    [DbContext(typeof(StudentPortfolioContext))]
    [Migration("20251003012832_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.Acknowledgement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompetitionId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OtherType")
                        .HasColumnType("longtext");

                    b.Property<string>("Place")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Acknowledgements");
                });

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.AcknowledgementCompetition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AcknowledgementId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcknowledgementId")
                        .IsUnique();

                    b.ToTable("AcknowledgementCompetitions");
                });

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.AcknowledgementStudentOrganization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AcknowledgementId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AcknowledgementId")
                        .IsUnique();

                    b.ToTable("AcknowledgementStudentOrganizations");
                });

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Institution")
                        .HasColumnType("longtext");

                    b.Property<string>("InstitutionalId")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.Acknowledgement", b =>
                {
                    b.HasOne("StudentPortfolio.API.Models.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.AcknowledgementCompetition", b =>
                {
                    b.HasOne("StudentPortfolio.API.Models.Entities.Acknowledgement", "Acknowledgement")
                        .WithOne("AcknowledmentCompetition")
                        .HasForeignKey("StudentPortfolio.API.Models.Entities.AcknowledgementCompetition", "AcknowledgementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acknowledgement");
                });

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.AcknowledgementStudentOrganization", b =>
                {
                    b.HasOne("StudentPortfolio.API.Models.Entities.Acknowledgement", "Acknowledgement")
                        .WithOne("AcknowledgementStudentOrganization")
                        .HasForeignKey("StudentPortfolio.API.Models.Entities.AcknowledgementStudentOrganization", "AcknowledgementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acknowledgement");
                });

            modelBuilder.Entity("StudentPortfolio.API.Models.Entities.Acknowledgement", b =>
                {
                    b.Navigation("AcknowledgementStudentOrganization");

                    b.Navigation("AcknowledmentCompetition");
                });
#pragma warning restore 612, 618
        }
    }
}
